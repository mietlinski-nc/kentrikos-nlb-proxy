AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless deployment pipeline for Terraform projects
Parameters:
  GithubOauthToken:
    Type: String
    Description: see http://docs.aws.amazon.com/codepipeline/latest/userguide/integrations-action-type.html for instructions
  GithubRepoOwner:
    Type: String
    Description: The Github owner of the repository
  GithubRepoName:
    Type: String
    Description: The GitHub repository where the Terraform files (to be executed) are located
  GithubRepoBranch:
    Type: String
    Default: master
    Description: The Git branch to be used
  TerraformVersion:
    Type: String
    Default: 0.11.11
    Description: The Terraform version to use
  TerraformSha256:
    Type: String
    Default: 94504f4a67bad612b5c8e3a4b7ce6ca2772b3c1559630dfd71e9c519e3d6149c
    Description: HASHICORP - Y U NO PACKAGE REPOSITORY
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Source Code Repository
        Parameters:
          - GithubRepoOwner
          - GithubRepoName
          - GithubRepoBranch
          - GithubOauthToken
      - Label:
          default: Terraform
        Parameters:
          - TerraformVersion
          - TerraformSha256
Resources:
  TerraformStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Location:
          Ref:
            ArtifactStoreBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GithubRepoOwner
                Repo: !Ref GithubRepoName
                Branch: !Ref GithubRepoBranch
                OAuthToken: !Ref GithubOauthToken
              RunOrder: 1
        - Name: InvokeTerraform
          Actions:
          - Name: InvokeTerraformAction
            ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
            OutputArtifacts:
              - Name: InvokeTerraformOutput
            InputArtifacts:
              - Name: SourceOutput
            Configuration:
                ProjectName: !Ref InvokeTerraformBuild
            RunOrder: 1
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  InvokeTerraformBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.7.1
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}-InvokeTerraformBuild
      ServiceRole: !Ref InvokeTerraformBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get -y install jq
                - pip install --upgrade pip
                - pip install awscli --upgrade
                - aws --version
                - aws sts get-caller-identity
                - cd /tmp && curl -o terraform.zip https://releases.hashicorp.com/terraform/0.11.11/terraform_0.11.11_linux_amd64.zip && echo "94504f4a67bad612b5c8e3a4b7ce6ca2772b3c1559630dfd71e9c519e3d6149c terraform.zip" | sha256sum -c --quiet && unzip terraform.zip && mv terraform /usr/bin
                - cd /tmp && curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/kubectl && chmod +x ./kubectl && mv kubectl /usr/bin
                - cd /tmp && curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator && chmod +x aws-iam-authenticator && mv aws-iam-authenticator /usr/bin
                - cd /tmp && curl -o helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz && tar -zxvf helm.tar.gz && mv linux-amd64/helm /usr/bin/helm
                - /usr/bin/aws-iam-authenticator help
            build:
              commands:
                - cd $CODEBUILD_SRC_DIR
                - terraform init -force-copy && terraform plan && terraform apply -auto-approve
                - sleep 10
                - export KUBECONFIG=kubeconfig_mstein-eks-use1; kubectl config current-context; kubectl get nodes
                - kubectl describe configmap -n kube-system aws-auth
                - kubectl get pods --all-namespaces
                - kubectl apply -f security/createAdminUser.yaml
                - kubectl apply -f security/assignRoleAdminUser.yaml
                - kubectl apply -f security/createHelmUser.yaml
                - kubectl apply -f security/assignRoleHelmUser.yaml
                - kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-mstein | awk '{print $1}')
                - kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
                - helm init --wait --service-account=tiller
                - sleep 20
                - helm repo update
                - helm upgrade --install metrics-server stable/metrics-server --namespace kube-system
                - kubectl apply -f namespaces/namespaces.yaml
                - helm upgrade --install  monitoring-prometheus stable/prometheus --namespace monitoring  -f monitoring/prometheus.yaml
                - helm upgrade --install  monitoring-grafana stable/grafana --namespace monitoring
                - sleep 10
                - kubectl get secret --namespace monitoring monitoring-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
                - helm upgrade --install cluster-autoscaler stable/cluster-autoscaler --namespace kube-system -f autoscaling/autoscaling.yaml
                - helm list
                - kubectl apply -f istio/istio-install.yaml
                - kubectl label namespace default istio-injection=enabled --overwrite=true

  InvokeTerraformBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
